# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qgs2postgis
                                 A QGIS plugin
 Module to upload data into existing datasets to postgis fastly
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-21
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Martin Reger
        email                : martin150897@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import geopandas as gpd
import tempfile
from shapely import Point
from sqlalchemy import create_engine

from .configuration import *
from .database import *
from .upload import upload

from qgis.core import QgsProject

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .qgs2postgis_dockwidget import qgs2postgisDockWidget
import os.path


class qgs2postgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'qgs2postgis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Qgs2PostGIS')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'qgs2postgis')
        self.toolbar.setObjectName(u'qgs2postgis')

        #print "** INITIALIZING qgs2postgis"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('qgs2postgis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qgs2postgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Qgs2PostGIS'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING qgs2postgis"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD qgs2postgis"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Qgs2PostGIS'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING qgs2postgis"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = qgs2postgisDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            # load service conf
            # load service conf
            check_pg_service_conf()
            pg_services, self.config = load_services() 

            
            # add services to combobox
            self.dockwidget.comboBoxService.addItems(pg_services)

            # open explorer on click
            self.dockwidget.editServicesButton.clicked.connect(open_filedialog)

            # add maplayers to combobox
            self.dockwidget.mMapLayerComboBox.setProject(QgsProject.instance())

            # create connection engine based on service
            # connect signal and trigger once initially
            self.dockwidget.comboBoxService.currentTextChanged.connect(self.on_service_changed)
            self.on_service_changed()  # set self.engine

            # get schemas and add to combobox
            schemata = get_all_schemata(engine=self.engine)
            schemata_names = [row[0] for row in schemata]
            self.dockwidget.comboBoxSchema.clear()
            self.dockwidget.comboBoxSchema.addItems(schemata_names)

            # initialize self.schema with first schema
            if schemata_names:
                self.schema = schemata_names[0]
            else:
                self.schema = None

            # connect signal
            self.dockwidget.comboBoxSchema.currentTextChanged.connect(self.on_schema_changed)

            # load tables for initial schema
            if self.schema:
                self.load_tables_for_schema(self.schema)

            # add modes to combobox
            modes = ["append to existing data"]
            self.dockwidget.comboBoxMode.clear()
            self.dockwidget.comboBoxMode.addItems(modes)

            if 'append' in self.dockwidget.comboBoxMode.currentText():
                self.mode = 'append'

            self.dockwidget.comboBoxMode.currentTextChanged.connect(self.on_mode_change)

            # add upload function to button
            self.dockwidget.startButton.clicked.connect(lambda: upload(
                layer = self.dockwidget.mMapLayerComboBox.currentLayer(),
                targetschema=self.schema,
                target_table=self.dockwidget.comboBoxTable.currentText(),
                engine=self.engine,
                mode=self.mode
            ))

    def on_service_changed(self):
        params = get_connection_params(config=self.config, service=self.dockwidget.comboBoxService.currentText())
        conn_url = get_connection_url(params)
        self.engine = create_engine(conn_url)

    def on_schema_changed(self):
        self.schema = self.dockwidget.comboBoxSchema.currentText()
        self.load_tables_for_schema(self.schema)

    def load_tables_for_schema(self, schema):
        if not schema:
            self.dockwidget.comboBoxTable.clear()
            return
        tables = get_all_tables_in_schema(engine=self.engine, schema=schema)
        table_names = [row[0] for row in tables]
        self.dockwidget.comboBoxTable.clear()
        self.dockwidget.comboBoxTable.addItems(table_names)

    def on_mode_change(self):
        if 'append' in self.dockwidget.comboBoxMode.currentText():
                self.mode = 'append'
